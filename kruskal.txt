Design Technique: Greedy Algorithm

Input: List of edges of a connected undirected weighted graph with V vertices
Output: Minimum Spanning Tree (MST) and its total weight

1. Sort all edges in non-decreasing order of their weight

2. Initialize:
   - parent[] = [0, 1, 2, ..., V-1] // For Union-Find
   - rank[] = [0, 0, ..., 0]       // For Union by Rank

3. Initialize MST result set = empty, totalWeight = 0

4. For each edge (u, v) in sorted edges:
   a. Find roots of u and v using Find with path compression
   b. If roots are different:
      - Add edge to MST
      - Union the sets (u, v)
      - Add weight to totalWeight
   c. If number of edges in MST == V - 1: break

5. Output the MST and its total weight


//code
import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int s, int d, int w) {
        src = s;
        dest = d;
        weight = w;
    }

    // Sort edges by weight
    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

public class KruskalsAlgorithm {

    // Find root of set using path compression
    static int find(int[] parent, int i) {
        if (parent[i] != i)
            parent[i] = find(parent, parent[i]);
        return parent[i];
    }

    // Union by rank
    static void union(int[] parent, int[] rank, int x, int y) {
        int xroot = find(parent, x);
        int yroot = find(parent, y);

        if (rank[xroot] < rank[yroot])
            parent[xroot] = yroot;
        else if (rank[xroot] > rank[yroot])
            parent[yroot] = xroot;
        else {
            parent[yroot] = xroot;
            rank[xroot]++;
        }
    }

    // Kruskal's algorithm
    static void kruskalMST(List<Edge> edges, int V) {
        Collections.sort(edges); // Step 1: sort edges by weight

        int[] parent = new int[V];
        int[] rank = new int[V];
        for (int i = 0; i < V; i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        List<Edge> result = new ArrayList<>();
        int totalWeight = 0;

        for (Edge edge : edges) {
            int uRoot = find(parent, edge.src);
            int vRoot = find(parent, edge.dest);

            if (uRoot != vRoot) {
                result.add(edge);
                totalWeight += edge.weight;
                union(parent, rank, uRoot, vRoot);
            }

            if (result.size() == V - 1)
                break;
        }

        // Print result
        System.out.println("Edge \tWeight");
        for (Edge e : result)
            System.out.println(e.src + " - " + e.dest + "\t" + e.weight);
        System.out.println("Total Weight of MST: " + totalWeight);
    }

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        List<Edge> edges = new ArrayList<>();

        System.out.println("Enter each edge in format: src dest weight");
        for (int i = 0; i < E; i++) {
            int src = sc.nextInt();
            int dest = sc.nextInt();
            int weight = sc.nextInt();
            edges.add(new Edge(src, dest, weight));
        }

        System.out.println("\nMinimum Spanning Tree using Kruskal's Algorithm:");
        kruskalMST(edges, V);

        sc.close();
    }
}

Enter number of vertices: 4
Enter number of edges: 5
Enter each edge in format: src dest weight
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
Minimum Spanning Tree using Kruskal's Algorithm:
Edge    Weight
2 - 3   4
0 - 3   5
0 - 1   10
Total Weight of MST: 19


time complexity 
Let:
V = Number of vertices
E = Number of edges
Breakdown:
Sorting edges: O(E log E)
Union-Find operations:
find() and union() with path compression + union by rank takes O(α(V)) time per operation 
(where α is the inverse Ackermann function, which is very slow-growing and close to constant in practice)
There are at most E edges, so total: O(E α(V))
Total Time Complexity = O(E log E)
(Since log E dominates α(V), and sorting is the most expensive step)
