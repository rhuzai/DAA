Design Technique Used Greedy 

Function Dijkstra(Graph G, int source):
    Input:
        G: adjacency list of vertices and edges with weights
        source: starting vertex

    Output:
        dist[]: array of shortest distances from source to each vertex

    Initialize:
        Let dist[] = array of size V filled with ∞
        dist[source] = 0

        visited[] = boolean array of size V initialized to false

        Create a Min-PriorityQueue pq
        Insert (0, source) into pq  // (distance, vertex)

    While pq is not empty:
        (currentDist, u) = pq.extractMin()
        
        If visited[u]:
            continue
        
        visited[u] = true

        For each neighbor (v, weight) of u in G[u]:
            If not visited[v] AND dist[u] + weight < dist[v]:
                dist[v] = dist[u] + weight
                pq.insert((dist[v], v))

    Return dist[]


import java.util.*;

class DijkstraWithPQ {
    static class Edge {
        int to, weight;
        Edge(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }

    static class Node implements Comparable<Node> {
        int vertex, dist;
        Node(int vertex, int dist) {
            this.vertex = vertex;
            this.dist = dist;
        }

        public int compareTo(Node other) {
            return Integer.compare(this.dist, other.dist);
        }
    }

    static void dijkstra(List<List<Edge>> graph, int source) {
        int n = graph.size();
        int[] dist = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.add(new Node(source, 0));

        while (!pq.isEmpty()) {
            Node current = pq.poll();
            int u = current.vertex;

            for (Edge edge : graph.get(u)) {
                int v = edge.to, weight = edge.weight;
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }

        // Print shortest distances
        System.out.println("Shortest distances from source vertex " + source + ":");
        for (int i = 0; i < n; i++) {
            System.out.println("To vertex " + i + " -> " + (dist[i] == Integer.MAX_VALUE ? "Unreachable" : dist[i]));
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        List<List<Edge>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        System.out.println("Enter edges (u v weight):");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            graph.get(u).add(new Edge(v, w));
            graph.get(v).add(new Edge(u, w)); // Undirected graph
        }

        System.out.print("Enter source vertex: ");
        int source = sc.nextInt();

        long startTime = System.currentTimeMillis();
        dijkstra(graph, source);
        long endTime = System.currentTimeMillis();

        System.out.println("Execution Time: " + (endTime - startTime) + " milliseconds");
    }
}
Enter number of vertices: 5
Enter number of edges: 6
Enter edges (u v weight):
0 1 2
0 2 4
1 2 1
1 3 7
2 4 3
3 4 1
Enter source vertex: 0

Shortest distances from source vertex 0:
To vertex 0 -> 0
To vertex 1 -> 2
To vertex 2 -> 3
To vertex 3 -> 8
To vertex 4 -> 6
Execution Time: 1 milliseconds


Time Complexity:
Operation	Total Calls	Cost per Call	Total Time
Initialize distances	1	O(V)	O(V)
Insert into priority queue	O(E)	O(log V)	O(E log V)
Poll from priority queue	O(V)	O(log V)	O(V log V)
Relax all edges	O(E)	O(1)	O(E)

O((V+E)⋅logV)
if it is sparse then - O(V.logV)
if it is dense then - O(V^2.logV)

adj matrix - O(V^2)
adj list - O((V+E)logV)

