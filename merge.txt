MERGE_SORT(arr, low, high):
    if low < high:
        mid = (low + high) / 2
        MERGE_SORT(arr, low, mid)
        MERGE_SORT(arr, mid + 1, high)
        MERGE(arr, low, mid, high)

MERGE(arr, low, mid, high):
    Create temp arrays L[] and R[] from arr[low..mid] and arr[mid+1..high]
    Initialize i = 0, j = 0, k = low
    While i < length of L and j < length of R:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i++
        else:
            arr[k] = R[j]
            j++
        k++
    Copy any remaining elements of L[] and R[] to arr


import java.util.Scanner;

public class MergeSort {
    
    // Merge function
    static void merge(int[] arr, int left, int mid, int right) {
        // Sizes of subarrays
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Create temp arrays
        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        // Merge the temp arrays back into arr
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }

        // Copy remaining elements
        while (i < n1) {
            arr[k++] = L[i++];
        }
        while (j < n2) {
            arr[k++] = R[j++];
        }
    }

    // Recursive merge sort function
    static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            // Sort first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Main method to take user input and sort the array
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input size and array elements
        System.out.print("Enter the number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Perform merge sort
        mergeSort(arr, 0, n - 1);

        // Print sorted array
        System.out.println("Sorted array:");
        for (int value : arr) {
            System.out.print(value + " ");
        }

        sc.close();
    }
}
Enter the number of elements: 5
Enter 5 integers:
4 2 5 1 3

Sorted array:
1 2 3 4 5

Time Complexity Analysis 
Case	Time Complexity	Explanation
Best	O(n log n)	Even if already sorted, merge still takes O(n).
Average	O(n log n)	Always divides into halves and merges.
Worst	O(n log n)	Structure of recursion is same, regardless of input order.


Detailed Explanation
Let:
T(n) be the time to sort an array of size n.
Merge step takes O(n) time.
Each recursive call splits the problem into two n/2 subproblems.

So the recurrence is:
T(n)=2T(n/2)+O(n)
a=2, b=2, d=1 in 
T(n)=aT(n/b)+O(n^d)
⁡logba = log22 = 1 = d

so, O(nlogn)
