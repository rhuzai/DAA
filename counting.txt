Algorithm Steps:
Use a modified version of merge sort.
Count inversions while merging two halves.
If arr[i] > arr[j] during merge, then all elements from arr[i] to arr[mid] form an inversion with arr[j].

//code

import java.util.Scanner;

public class CountInversions {

    // Function to merge two sorted halves and count inversions
    static long mergeAndCount(int[] arr, int[] temp, int left, int mid, int right) {
        int i = left;      // Left subarray pointer
        int j = mid + 1;   // Right subarray pointer
        int k = left;      // Temp array pointer
        long invCount = 0;

        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                invCount += (mid - i + 1); // Count inversions
            }
        }

        // Copy remaining elements
        while (i <= mid)
            temp[k++] = arr[i++];
        while (j <= right)
            temp[k++] = arr[j++];

        // Copy merged subarray to original array
        for (i = left; i <= right; i++)
            arr[i] = temp[i];

        return invCount;
    }

    // Recursive function to implement modified merge sort
    static long mergeSortAndCount(int[] arr, int[] temp, int left, int right) {
        long invCount = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            invCount += mergeSortAndCount(arr, temp, left, mid);
            invCount += mergeSortAndCount(arr, temp, mid + 1, right);

            invCount += mergeAndCount(arr, temp, left, mid, right);
        }
        return invCount;
    }

    // Main function
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // User input
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];
        int[] temp = new int[n];

        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();

        long inversionCount = mergeSortAndCount(arr, temp, 0, n - 1);

        System.out.println("Number of inversions: " + inversionCount);

        sc.close();
    }
}

Enter number of elements: 5
Enter the elements:
2 4 1 3 5

Number of inversions: 3

Time Complexity
Divide step	O(log n) (recursive)
Merge + count step	O(n) per level
Total	O(n log n)

Conclusion:
Optimal Time Complexity for counting inversions: O(n log n) using Modified Merge Sort.
Brute-force approach: O(nÂ²)
