Algorithm Steps:
Choose a pivot (commonly the last element).
Partition the array:
All elements smaller than the pivot go to its left.
All elements greater than the pivot go to its right.
Recursively apply the above steps to the subarrays.

QUICK_SORT(arr, low, high):
    if low < high:
        pi = PARTITION(arr, low, high)
        QUICK_SORT(arr, low, pi - 1)
        QUICK_SORT(arr, pi + 1, high)

PARTITION(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j = low to high - 1:
        if arr[j] < pivot:
            i++
            swap arr[i] and arr[j]
    swap arr[i + 1] and arr[high]
    return i + 1


import java.util.Scanner;

public class QuickSort {

    // Partition function
    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Choose last element as pivot
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap pivot to correct position
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    // Quick sort function
    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high); // Partitioning index

            // Recursively sort elements before and after partition
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    // Main function to take user input
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        System.out.println("Enter " + n + " elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Perform quick sort
        quickSort(arr, 0, n - 1);

        // Print sorted array
        System.out.println("Sorted array:");
        for (int val : arr) {
            System.out.print(val + " ");
        }

        sc.close();
    }
}

Enter number of elements: 6
Enter 6 elements:
10 7 8 9 1 5

Sorted array:
1 5 7 8 9 10

Case	Time Complexity	Explanation
Best Case	O(n log n)	Pivot divides array into two nearly equal parts at every step.
Average Case	O(n log n)	On average, the pivot will divide the array fairly evenly.
Worst Case	O(n²)	Pivot is the smallest or largest element each time → highly unbalanced partitions.
