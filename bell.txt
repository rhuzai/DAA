Function BellmanFord(Graph G, int V, int E, EdgeList edges, int source):
    Input:
        G: Directed graph with V vertices and E edges
        edges: List of all edges (u, v, weight)
        source: Source vertex

    Output:
        dist[]: Array of shortest path distances from source
        OR report negative weight cycle

    Step 1: Initialization
        Create array dist[0...V-1], initialized to ∞
        dist[source] = 0

    Step 2: Relax all edges (V - 1) times
        for i from 1 to V - 1:
            for each edge (u, v, weight) in edges:
                if dist[u] ≠ ∞ and dist[u] + weight < dist[v]:
                    dist[v] = dist[u] + weight

    Step 3: Check for negative weight cycles
        for each edge (u, v, weight) in edges:
            if dist[u] ≠ ∞ and dist[u] + weight < dist[v]:
                print "Graph contains a negative weight cycle"
                return

    Step 4: Output shortest distances
        for each vertex v:
            print "dist[v] = " + dist[v]


import java.util.*;

public class BellmanFord {
    static class Edge {
        int from, to, weight;
        Edge(int from, int to, int weight) {
            this.from = from;
            this.to = to;
            this.weight = weight;
        }
    }

    public static void bellmanFord(List<Edge> edges, int V, int source) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        long startTime = System.currentTimeMillis();

        // Relax all edges V-1 times
        for (int i = 1; i < V; i++) {
            for (Edge edge : edges) {
                if (dist[edge.from] != Integer.MAX_VALUE &&
                    dist[edge.from] + edge.weight < dist[edge.to]) {
                    dist[edge.to] = dist[edge.from] + edge.weight;
                }
            }
        }

        // Check for negative weight cycle
        boolean hasNegativeCycle = false;
        for (Edge edge : edges) {
            if (dist[edge.from] != Integer.MAX_VALUE &&
                dist[edge.from] + edge.weight < dist[edge.to]) {
                hasNegativeCycle = true;
                break;
            }
        }

        long endTime = System.currentTimeMillis();

        if (hasNegativeCycle) {
            System.out.println("Graph contains a negative weight cycle!");
        } else {
            System.out.println("Shortest distances from source vertex " + source + ":");
            for (int i = 0; i < V; i++) {
                System.out.println("To vertex " + i + " -> " +
                        (dist[i] == Integer.MAX_VALUE ? "Unreachable" : dist[i]));
            }
        }

        System.out.println("Execution Time: " + (endTime - startTime) + " milliseconds");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();

        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        List<Edge> edges = new ArrayList<>();
        System.out.println("Enter edges (from to weight):");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            edges.add(new Edge(u, v, w)); // Directed edge
        }

        System.out.print("Enter source vertex: ");
        int source = sc.nextInt();

        bellmanFord(edges, V, source);
    }
}
Enter number of vertices: 5
Enter number of edges: 8
Enter edges (from to weight):
0 1 6
0 2 7
1 2 8
1 3 5
1 4 -4
2 3 -3
2 4 9
3 1 -2
Enter source vertex: 0

Shortest distances from source vertex 0:
To vertex 0 -> 0
To vertex 1 -> 2
To vertex 2 -> 7
To vertex 3 -> 4
To vertex 4 -> -2
Execution Time: 1 milliseconds


Stage	Time Complexity
Initialization	
O(V)
Edge Relaxation	
O(V⋅E)
Negative Cycle Detection	
O(E)
